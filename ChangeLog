	lpcisp -- NXP LPCxxxx ISP

	change log
	  0.0.1 -- 16 February, 2015
	    first release
	  0.0.2 -- 16 February, 2015
	    corrected clock ISP command call (divides clock by 1000)
	  0.0.3 -- 17 February, 2015
	    added LPC8xx part definitions
	  0.0.4 -- 20 March, 2015
	    added support to tbaud argument (set baud rate for terminal)
	  0.0.5 -- 6 May, 2015
	    don't enter terminal mode if an error occurred in a prior step
	  0.0.6 -- 21 May, 2015
	    added support for devices which don't uuencode their data when reading/writing RAM
	  0.0.7 -- 23 May, 2015
	    added -parts option to dump list of supported parts
		if -term is used without other operations go straight to term, don't go through Sync() first
	  0.0.8 -- 17 June, 2015
	    added support for LPC13xx parts
	    fixed handling of line termination
		added -echo command to allow enabling echo
	  0.0.9 -- 2 July, 2015
	    fixed ReadString() so it just ignores CR (works with CRLF or LF)
	  0.0.10 -- 3 July, 2015
	    set ReadString() to stop on either CR or LF -- !!! this causes problems for binary transfers !!!
	  0.0.11 -- 6 July, 2015
	  	changed ReadString() again to try to manage CRLF correctly.
	  	improved max verbose reporting
 	  0.0.12 -- 7 August, 2015
 	    don't report error if terminal is only requested operation (doesn't read device ID, was complaining it didn't know what kind of device it was)
 		added error message if no serial device was specified
	  0.0.13 -- 31 August, 2015
	    added support for LPC17xx (need non-uniform sector support for full function)
	    changed OpenDevice() to configure only necessary flags (seems to communicate more reliably)
	  0.0.14 -- 1 September, 2015
	    exit on various failures (stop processing, don't drop to terminal mode)
	    corrected flags for LPC17xx to include uuencode
	    added support for non-uniform sector sizes
	  0.0.15 -- 10 December, 2015
	    added LPC23xx to the set of supported parts
	    fixed line termination handling so all parts work correctly (uuencoded and binary transfers both work now)
	    if reset is not mapped to a pin issue a GO command to address zero instead when exiting ISP mode
	    skip over vectors (64 bytes) when verifying parts which re-map the vector table in ISP mode
	  0.0.16 -- 14 June, 2016
	    cleaned up usage of reset, added 100 ms delay after negating reset on entry to ISP mode before attempting to communicate
	  0.0.17 -- 22 June, 2016
	    added support for non-standard baud rates in OSX
	  0.0.18 -- 10 July 2016
	    added flag for HAS_UID, skip trying to read or report UID on parts which don't support it (need to fully update partDef[])
	  0.0.19 -- 29 July, 2016
	    added support for LPC18xx parts.  these parts may have multiple flash banks and have two word IDs so the part description
	    table was extended to add parameters to support the differences.  the low level functions now have the ability to write to 
	    arbitrary banks but for now only bank 0 (A) is supported.
	  0.0.20 -- 29 July, 2016
	    improved hex file handling to work properly with files which don't start at address zero
	    expanded sector map in part description to include bank and base address in addition to size (banks still not fully supported)
	  0.0.21 -- 30 July, 2016
	    added -vector argument to allow forcing of vector table patching when image does not start at zero
	  0.0.22 -- 6 December, 2017
		removed debugging code
		corrected usage instructions for -isp
		added support for LPC154x, LPC151x, LPC175x, and LPC176x (via Todd Squires)
		added flag for skipping first 256 bytes when verifying parts which re-map the bootloader into vector space in ISP mode (previously only support 64 bytes)
	  0.0.23 -- 20 December 2017
	    added support for LPC21xx and LPC22xx parts
	  0.0.24 -- 26 December 2017
	    added support for LPC822/LPC824 parts
	  0.0.25 -- 7 February 2018
	    added support for LPC546xx parts
	    corrected display of dumps which don't end on 16-byte boundary
	    added SKIP_0 flag for parts (e.g., LPC546xx) which can't read word 0 from flash
	    ensured hex file start address and number of bytes to read from flash are on word boundaries (multiple of 4 bytes)
	    added support for extended address segment records in intel hex files
	  0.0.26 -- 15 June, 2018
	    added -start command line option to allow loading file at different address than passed in hex file or 0 for binary files
	  0.0.27 -- 13 February, 2019
	    added support for Windows
	  0.0.28 -- 30 March, 2019
	    added FlushDevice() command, flush serial port after asserting reset and before communicating with target.
	  0.0.29 -- 12 September, 2019
	    added support for LPC1124 and LPC1125
	  0.0.30 -- 4 November 2019
	    change "erase" and "eraseall" to "erasemin" and "erase", respectively.  "erasemin" erases only the sectors which are affected by the
	      incoming hex file, "erase" bulk erases the entire device.
	  0.0.31 -- 20 January, 2020
	    altered code in isp.c to suppress spurious warnings from gcc 8.3.0
	    added bank support for flash erase and write
	    added "-device" option to allow operations on a specific device rather than whatever is detected (default)
	    corrected name of LPC1114[FHN33/301|FHN33/302|FHI33/302|FBD48/302|FBD100/302] in part list
	  0.0.32 -- 6 March 2020
	    corrected bug which caused verify to operate on word instead of byte boundaries
	  0.0.33 -- 27 June 2020
	    swapped major and minor boot version (were reversed)
	  0.1.0 -- 3 September 2020
	    split core functionality into a library so it can be more easily included in other applications (Unix only)
	  0.1.1 -- 26 May 2021
	    corrected naming issue which caused Windows version to fail to build
	    disabled XON/XOFF flow control on Windows driver (was causing 0x11 and 0x13 to be dropped when transfering data via binary)
	  0.1.2 -- 17 June 2021
	    corrected top-level error reporting (was incorrectly indexing into errString[])
	  0.1.3 -- 6 December 2021
	    added LPCISP_FixVectorTable() so applications which link lpcisp as a library can more easily patch the vector table
	  	added parts: LPC1345FHN33, LPC1345FBD48, LPC1346FHN33, LPC1346FBD48, LPC1347FHN33, LPC1347FBD48, LPC1347FBD64, LPC1315FHN33, LPC1315FBD48, LPC1316FHN33, LPC1316FBD48, LPC1317FHN33, LPC1317FBD48, LPC1317FBD64
	  	report device ID of unknown parts

	to do:
		add support for lots more parts
		allow write to start on non-page boundaries
		enable XON/OFF handshaking where appropriate
		consider including memmap register in part description structure of parts which have it, write 1 before verifying to allow access to full user flash space
			(this only works if device doesn't use interrupts in ISP code, need to verify that)
