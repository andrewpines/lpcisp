

        lpcisp -- NXP ISP programming tool

lpcisp is intended to be a clean and flexible way to identify, erase, read, and write
NXP LPC-family components which support serial ISP (In-System Programming) mode.

The basic usage is:
        lpcisp [options] device

The device argument is the serial device used to communicate with the
target processor.  All options are preceded by a dash.  To get the
current complete list of options invoke the program with no arguments.

Please note:
        1) on exit the target is reset.  If reset isn't mapped a SYSRESETREQ is invoked.
        	Due to some ambiguity as to what the boot loader manages to respond after
        	the "GO" command and before the part resets a couple of unexpected bytes
        	may be received by the host application on startup.
        2) the set of supported devices is incomplete and some may be inaccurate.  Adding
                more parts is simply a matter of adding lines to the list.  See partdesc.c.
                Please forward changes and additions via:
                   https://github.com/andrewpines/lpcisp/issues
        3) some devices are more finicky about the oscillator setting and baud rate than
                others.  if it has trouble communicating try reducing the baud rate.
        4) some devices (LPC2134, for instance) don't seem to communicate correctly unless
                the echo option is enabled.  The transfer is much faster with echo off, so
                it's off by default.  If the device identifies correctly but fails to
                acknowledge the transfer of blocks of data try enabling echo.

Supporting documentation:
        AN11229, UUencoding for UART ISP, Rev. 1 -- 22 June 2012
        UM10114, LPC21xx and LPC22xx User manual, Rev. 4 -- 2 May 2012
        UM10120, LPC2131/2/4/6/8 User manual, Rev. 4 -- 23 April 2012
        UM10211, LPC23xx User manual, Rev. 4.1 -- 5 September 2012
        UM10360, LPC176x/5x User manual, Rev. 4. 1 -- 19 December 2016
        UM10375, LPC1311/13/42/43 User manual, Rev. 5 -- 21 June 2012
        UM10398, LPC111x/LPC11Cxx User manual, Rev. 12.1, August 2013
        UM10430, LPC18xx User manual, Rev. 2.8 -- 10 December 2015
        UM10470, LPC178x/7x User manual, Rev. 3.1 -- 15 September 2014
        UM10601, LPC800 User Manaual, Rev. 1.3, 22 July 2013
        UM10736, LPC15xx User manual, Rev. 1.1 -- 3 March 2014
        UM10800, LPC82x User manual, Rev. 1.2 -- 5 October 2016
	UM10912, LPC546xx User manual, Rev. 1.9 -- 16 June 2017

================================================

COMMAND LINE OPTIONS

Following is a list of the available options:

-device name    specify an LPC device name (e.g., "LPC1311FHN33").  the name
                must exactly match one of the names listed by "lpcisp -parts".
                lpcisp will stop if the name specified does not match the name
                implied by the part ID code read from the device.  if no name
                is specified then no check is made and lpcisp will attempt to
                perform the specified operations on whatever device is detected.

-reset ctrl     map the reset function to a serial device signal.  ctrl may be
                one of dtr, ndtr, rts, or nrts.  lpcisp will assert (dtr, rts)
                or negate (ndtr, nrts) the selected signal to reset the target.
                default is none.

-isp ctrl       map the ISP function to a serial device signal.  ctrl may be
                one of dtr, ndtr, rts, or nrts.  lpcisp will assert (dtr, rts)
                or negate (ndtr, nrts) the selected signal to invoke ISP on the
                target.  Default is none.

-hold           if invoked the ISP signal will be held through the programming
                sequence.  this is for systems where the signal is used to take
                competing serial devices off the bus during programming.  Default
                is to negate ISP immediately after reset at start of programming
                sequence.

-baud rate      set the baud rate to be used for communicating with the target
                device.  Default is 115200.

-tbaud rate     set the baud rate to be used for terminal mode.  Default is 115200.

-clock rate     set the clock rate of the target device, in kHz.  Default is
                12000 (12MHz).

-retry num      set the number of times to attempt to sync to the target device.
                Default is 25.

-bin filename   load a binary file to be written to or compared against the flash
                memory of the target device.  Always loads at address 0x00000000.

-hex filename   load an intel hex file to be written to or compared against the flash
                memory of the target device.  Does not need to begin at address
                0x00000000 but if it is to be written to the target it does need
                to start on a page boundary.  This restriction may someday be lifted
                if an application appears where it would be useful.

-vector         LPC parts require vector 7 to be the 2's complement of the sum of
                vectors 0 through 6.  If the image starts at address 0x00000000 this
                is filled in automatically.  if the image does not start at 0x00000000
                but the beginning of the image is the vector table then this option
                will force the patching of vector 7 at the beginning of the image.

-erase          erase required sectors on target device (i.e., any sectors which
                coincide with the data about to be written).  Note that this may fail
                if the device is read-protected since it may not erase the sector
                with the code read protect word.

-eraseall       erase the target device (all sectors).

-echo           enable command echo (disabled by default).

-write          write the loaded file to flash on the target.

-verify         compare the loaded file with the flash on the target.  Note that this
                does not require writing the file first though if it is used without
                first writing the code it requires that code read protect is disabled.

-dump address length      dump a block of memory from the device.  Address may be anywhere
                within the device but it must be word-algned (multiple of four).  Length
                must also be word-aligned.  If this is executed without erase/write then
                code read protect must be disabled.

-term           after completion of other operations reset the target and drop to a
                terminal to communicate with it.  The baud rate is set by the -tbaud
                option.  Pressing <ESC> will reset the target (if -reset was configured)
                and pressing <CTRL-X> will exit.  All other key codes are passed to the
                target.

-verbose level  set the reporting level (0-4):
                  0: errors only.
                  1: minimum (only what was expressly requested, just memory dump).
                  2: information; basic information about devices and process.  This is the default.
                  3: debug process; details about the various tasks being executed.
                  4: debug full; complete dump of data exchanged with target.
                all messages at or below the selected level will be displayed (e.g., if level
                is set to 2 then messages at levels 0, 1, and 2 will be displayed).

-parts          dump a list of supported parts.

================================================

EXAMPLES

        ID
                The target processor can be identified without performing any operations on it.
                Assume:
                  the target has its reset signal connected to DTR
                  the target has its ISP signal connected to RTS
                  the serial device is /dev/ttyS0
                The command would be:
                  lpcisp -reset ndtr -isp nrts /dev/ttyS0

                Note that DTR and RTS are inverted.  This is the correct mapping if they are
                connected directly to the outputs of an RS232-to-logic level converter.

                if successful lpcisp will report something like the following:
                  device information:
                     part number:  LPC1112FHN33/[101|102]
                     ID:           0x2524d02b
                     flash size:   16384 bytes
                     SRAM size:    2048 bytes
                     UID:          f5000001 4ff53bb2 53581b51 0707212d
                     boot version: 1.7

                The ID, UID and boot version are read from the part.  The rest are looked up
                based on the ID.


        Erase
                To erase the device from the previous example the command would be:
                  lpcisp -reset ndtr -isp nrts -eraseall /dev/ttyS0


        Write
                The most common task is to write an image to a device.  To write an Intel
                hex file named image.hex to the target device in the above examples the
                command would be:
                  lpcisp -reset ndtr -isp nrts -hex image.hex -erase -write /dev/ttyS0


        Verify
                To verify the code after writing in the above example simply add the -verify
                option:
                  lpcisp -reset ndtr -isp nrts -hex image.hex -erase -write -verify /dev/ttyS0

                Alternatively, a previously-written image can be verified against a hex file
                if code protect is disabled.  This will report the result but will not alter
                the target device:
                  lpcisp -reset ndtr -isp nrts -hex image.hex -verify /dev/ttyS0


        Dump
                Similar to verify, a block of word-aligned memory can be dumped out.  To
                read 256 bytes starting at address 0x000200 from the target device in the
                previous examples the command would be:
                  lpcisp -reset ndtr -isp nrts -dump 0x200 256  /dev/ttyS0

                Note that the address and length arguments can be either decimal or hex
                (preceded by 0x).  Again, this only works after erasing the entire device
                or if code read protect is disabled.

        Terminal
                A serial terminal may be opened after other operations are complete.  Reset
                and ISP are left in their negated states.  The baud rate is set by the
                -tbaud option.  The terminal can be entered without other operations.  The
                command would be:
                  lpcisp -reset ndtr -isp nrts -tbaud 9600 -term /dev/ttyS0

================================================

LINKING AS A LIBRARY

liblpcisp.a can be linked to another application to add LPC programming ability.  Link liblpcisp.a
and include the headers lpcisp.h and asyncserial.h.

set where to send the report data (p=output stream)
void LPCISP_ReportStream(FILE *p);

set the report level (0=errors only, 1=minimum, 2=progress (default), 3=process debug, 4=full debug)
void LPCISP_SetReportLevel(int level);

read hex file into buffer, return pointer to buffer or NULL if error.  caller must free returned buffer.
  fileName: name of hex file to load
  start: pointer to start address (to be filled in)
  length: pointer to length of image (to be filled in)
unsigned char *LPCISP_ReadHexFile(const char *fileName,int *start,int *length);

fix up vector table.  LPC devices require vector 7 to be the 2's comp of the arithmetic sum of vectors 0-6.
  data: buffer of file image (e.g., returned by LPCISP_ReadHexFile)
void LPCISP_FixVectorTable(unsigned char *data);

open the device that we are going to communicate through, set it to 115200 baud, raw mode, return
descriptor number on success, -1 on error
int LPCISP_SERIAL_OpenDevice(const char *name)

close the device that was opened by LPCISP_SERIAL_OpenDevice
void LPCISP_SERIAL_CloseDevice(int fd);

Attempt to read the given number of bytes before timeout (uS) occurs during any read attempt.
Return the number of bytes received or -1 on error.  if maxBytes is zero will simply return zero.
 fd -- file descriptor of serial device
 buf -- pointer to buffer to be filled
 maxBytes -- max number of bytes to read
 timeout -- time to wait on any read, in microseconds
int LPCISP_SERIAL_ReadBytes(int fd,unsigned char *buf,unsigned int maxBytes,unsigned int timeOut);

Write bytes to device.  return number of bytes written (should be same as numBytes unless error).
 fd -- file descriptor
 buf -- pointer to buffer to be sent
 numBytes -- number of bytes to send
unsigned int LPCISP_SERIAL_WriteBytes(int fd,const unsigned char *buf,unsigned int numBytes);

Set the state of the DTR handshake line
void LPCISP_SERIAL_SetDTR(int fd, int state);

Set the state of the RTS handshake line
void LPCISP_SERIAL_SetRTS(int fd, int state);

flush the serial device.
void LPCISP_SERIAL_FlushDevice(int fd);

set baud rate for communication with target device
  fd - file descriptor
  baud - baud rate
  stop - number of stop bits (1 or 2)
int LPCISP_SetBaudRate(int fd, int baud, int stop);

test if range of sectors are blank.
  fd - file descriptor
  startSector - first sector in range to be checked
  endSector - last sector in range to be checked
int LPCISP_BlankCheck(int fd, int startSector, int endSector);

int LPCISP_GetSectorAddr(unsigned int addr, partinfo_t *p);

int LPCISP_ResetTarget(int fd);

exit ISP mode.  Reset device if possible, attempt to jump to address zero if reset is not configured.
  fd - file descriptor
void LPCISP_ExitISPMode(int fd);

unsigned int LPCISP_ReadPartID(int fd, unsigned int *id1);
int LPCISP_ReadPartUID(int fd, unsigned int *uid);
int LPCISP_ReadBootCodeVersion(int fd, unsigned char *major, unsigned char *minor);
int LPCISP_Erase(int fd, int startSector, int endSector, int bank, partinfo_t *partInfo);
int LPCISP_ReadFromTarget(int fd, unsigned char *data, unsigned int addr, unsigned int count,partinfo_t *partInfo);
int LPCISP_WriteToFlash(int fd,unsigned char *data,unsigned int addr,unsigned int length,partinfo_t *partInfo);
int LPCISP_Sync(int fd, int baud, int clock, int retries, int setecho, int hold, int reset, int isp, partinfo_t *partInfo);




Basic implementation:


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <errno.h>
#include "lpcisp.h"
#include "asyncserial.h"

int WriteLPCDevice(const char *hexFileName, const char *deviceName)
// hexFileName - path to file to write to device
// deviceName - name of serial device, like /dev/ttyUSB0
// return 0 on success, -1 on any error.
{
	int
		fd,
		start,
		length,
		startSector,
		endSector;
	partinfo_t
		partInfo;
	unsigned char
		*buffer;

	LPCISP_ReportStream(stdout);	/* set where to send report text */
	LPCISP_SetReportLevel(2);	/* set report level (0=errors only, 1=minimum, 2=progress (default), 3=process debug, 4=full debug) */

	buffer=LPCISP_ReadHexFile(hexFileName,&start,&length);	/* read in the hex file, will determine the start address and length of the file. */
	if(buffer)
	{
		if(start==0)
		{
			LPCISP_FixVectorTable(buffer);	/* if image starts at address zero fix up the vector table */
		}
		fd=LPCISP_SERIAL_OpenDevice(deviceName);	/* open the serial device */
		if(fd>=0)
		{
			if(LPCISP_Sync(fd,115200,12000,5,0,1,PIN_nDTR,PIN_nRTS,&partInfo)>=0)	/* synchronize with the device */
			{
				startSector=LPCISP_GetSectorAddr(start,&partInfo);		/* find start and end sectors which cover loaded image.  to erase entire device */
				endSector=LPCISP_GetSectorAddr(start+length,&partInfo);		/* set startSector=0 and endSector=partInfo.numSectors-1. */

				if(LPCISP_Erase(fd,startSector,endSector,0,&partInfo)==0)	/* erase range */
				{
					if(LPCISP_WriteToFlash(fd,buffer,start,length,&partInfo)==0)	/* write to flash */
					{
						LPCISP_ExitISPMode(fd);				/* exit ISP mode, start application */
						fprintf(stderr,"success!\n");
						return(0);
					}
					else
					{
						fprintf(stderr,"failed to erase device\n");
					}
				}
				else
				{
					fprintf(stderr,"failed to erase\n");
				}
			}
			else
			{
				fprintf(stderr,"failed to sync to device\n");
			}
			LPCISP_SERIAL_CloseDevice(fd);	/* close serial port */
		}
		else
		{
			fprintf(stderr,"failed to open device, %s\n",strerror(errno));
		}
		free(buffer);
	}
	else
	{
		fprintf(stderr,"failed to open hex file %s, %s\n",hexFileName,strerror(errno));
	}
	return(-1);
}
